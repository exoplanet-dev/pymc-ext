name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
        arviz-version: ["arviz"]
        pymc-version:
          - "pymc3~=3.11.0"
          - "https://github.com/pymc-devs/pymc3/archive/master.zip"
        include:
          - python-version: "3.9"
            arviz-version: "arviz<0.11"
            pymc-version: "pymc3~=3.9.0"
          - python-version: "3.9"
            arviz-version: "arviz<0.11"
            pymc-version: "pymc3~=3.10.0"

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: ${{ matrix.python-version }}

      # Setup
      - name: Install dependencies
        shell: bash -l {0}
        run: |
          python -m pip install -U pip
          python -m pip install "${{ matrix.pymc-version }}" "${{ matrix.arviz-version }}"
          python -m pip install -U -e .[test]

      - name: Run tests
        shell: bash -l {0}
        run: python -m pytest --cov=pymc3_ext -v tests

      - name: Coverage
        uses: AndreMiras/coveralls-python-action@v20201129
        continue-on-error: true
        with:
          parallel: true

  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: AndreMiras/coveralls-python-action@v20201129
        with:
          parallel-finished: true

  build:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.9"

      - name: Build
        run: |
          python -m pip install -U pip
          python -m pip install -U build
          python -m build .

      - name: Test the wheel
        run: |
          python -m pip install twine
          twine check dist/*

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*

  upload_pypi:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          # To test: repository_url: https://test.pypi.org/legacy/
